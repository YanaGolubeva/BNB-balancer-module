bnb_assert_flag = 1;

if (mRank == 0) {
	while (1==1) {
		if (mState == mStates.I) {
			mState = mMasterStates.PRESOLVING;
			if (event_mCode == EVENT_START) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			action_mCode = ACTION_SET_SEARCH_STRATEGY;
			action_mArgs[0] = mMasterSearchStrategy;
			break;
		}
		if (mState == mMasterStates.PRESOLVING) {
			if (event_mCode == EVENT_SEARCH_STRATEGY_SET) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			action_mCode = ACTION_SOLVE;
			action_mArgs[0] = mSteps;
			mState = mMasterStates.SOLVING;
			break;
		}
		if (mState == mMasterStates.SOLVING) {
			if (event_mCode == EVENT_DONE) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			mState = mMasterStates.CHECKING;
		}
		if (mState == mMasterStates.CHECKING) {
			if (mSize == 1) {
 				mState = mStates.T;
 				action_mCode = ACTION_EXIT;
				break;
			} 
			else {
				if (info_mNSub > 0) {
 					if (mFreeProcs.size() > 0) {
						mState = mMasterStates.SENDING1;
 						action_mCode = ACTION_SEND_SUB_AND_RECORDS;
						action_mArgs[0] = mFreeProcs.back();
						action_mArgs[1] = 1;
						mFreeProcs.pop_back();
						break;
					} 
					else {
 						mState = mMasterStates.RECEIVING;
						action_mCode = ACTION_RECV;
						action_mArgs[0] = -1;
						break;
 					}
 				} 
				else {
 					if (mFreeProcs.size() < mSize - 1) {
						mState = mMasterStates.RECEIVING;
 						action_mCode = ACTION_RECV;
						action_mArgs[0] = -1;
						break;
					} 
					else {
						mState = mMasterStates.BEFORE_END;
 					}
				}
 			}
 			
		}
		if (mState == mMasterStates.SENDING1) {
			if (event_mCode == EVENT_SENT) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
 			mState = mMasterStates.CHECKING;
		}
		if (mState == mMasterStates.RECEIVING) {
			if (event_mCode == EVENT_DATA_ARRIVED) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			mState = mMasterStates.CHECKING;
			mFreeProcs.push_back(event_mArgs[0]);
		}
		if (mState == mMasterStates.BEFORE_END) {
			if (mFreeProcs.size() > 0) {
				mState = mMasterStates.SENDING2;
				action_mCode = ACTION_SEND_COMMAND;
				action_mArgs[0] = mFreeProcs.back();
 				action_mArgs[1] = mCommands.FINISH;
 				mFreeProcs.pop_back();
			} 
			else {
				mState = mStates.T;
				action_mCode = ACTION_EXIT;
			}
			break;
		}
		if (mState == mMasterStates.SENDING2) {
			if (event_mCode == EVENT_SENT) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			mState = mMasterStates.BEFORE_END;
		}
	}
}
else {
	while (1==1) {
		if (mState == mStates.I) {
			mState = mSlaveStates.PRESOLVING;
			if (event_mCode == EVENT_START) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			action_mCode = ACTION_SET_SEARCH_STRATEGY;
			action_mArgs[0] = mSlaveSearchStrategy;
			break;
		}
		if (mState == mSlaveStates.PRESOLVING) {
			if (event_mCode == EVENT_SEARCH_STRATEGY_SET) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
			action_mCode = ACTION_RECV;
			action_mArgs[0] = 0;
			mState = mSlaveStates.RECEIVING;
			break;
		}
		if (mState == mSlaveStates.RECEIVING) {
			if (event_mCode == EVENT_COMMAND_ARRIVED) {
				bnb_assert_flag = 1;
			}
			else {
				if (event_mCode == EVENT_DATA_ARRIVED) {
					bnb_assert_flag = 1;
				}
				else {
					bnb_assert_flag = 0;
				}
			}
			BNB_ASSERT(bnb_assert_flag);
			if (event_mCode == EVENT_DATA_ARRIVED) {
				mState = mSlaveStates.SOLVING;
				action_mCode = ACTION_SOLVE;
				action_mArgs[0] = max_long;
				print(max_long)
				print(action_mArgs[0]);
			} 
			else {
				if (event_mArgs[1] == mCommands.FINISH) {
					bnb_assert_flag = 1;
				}
				else {
					bnb_assert_flag = 0;
				}
				BNB_ASSERT(bnb_assert_flag);
				mState = mStates.T;
				action_mCode = ACTION_EXIT;
                	}
                	break;
		}
		if (mState == mSlaveStates.SOLVING) {
			if (event_mCode == EVENT_DONE) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
                	mState = mSlaveStates.SENDING;
                	action_mCode = ACTION_SEND_RECORDS;
                	action_mArgs[0] = 0;
                	break;
		}
		if (mState == mSlaveStates.SENDING) {
			if (event_mCode == EVENT_SENT) {
				bnb_assert_flag = 1;
			}
			else {
				bnb_assert_flag = 0;
			}
			BNB_ASSERT(bnb_assert_flag);
                	action_mCode = ACTION_RECV;
                	action_mArgs[0] = 0;
                	mState = mSlaveStates.RECEIVING;
                	break;
		}
	}
}
	

